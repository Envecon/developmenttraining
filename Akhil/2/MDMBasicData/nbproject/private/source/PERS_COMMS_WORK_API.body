CREATE OR REPLACE PACKAGE BODY Pers_Comms_Work_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (person_id                      BOOLEAN := FALSE,
   comm_line_id                   BOOLEAN := FALSE,
   company_id                     BOOLEAN := FALSE,
   company_office                 BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Raise_Too_Many_Rows___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ pers_comms_work_tab%ROWTYPE );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ pers_comms_work_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER) RETURN pers_comms_work_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER) RETURN pers_comms_work_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN pers_comms_work_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN pers_comms_work_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN VARCHAR2;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN pers_comms_work_tab%ROWTYPE,
   newrec_ IN pers_comms_work_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     pers_comms_work_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     pers_comms_work_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     pers_comms_work_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN pers_comms_work_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN pers_comms_work_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN pers_comms_work_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Emp_Work_Comm_Value___ (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2,
   method_ IN VARCHAR2 ) RETURN VARCHAR2;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rowkey_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE
   IS
      rec_ pers_comms_work_tab%ROWTYPE;
   BEGIN
      SELECT person_id, comm_line_id
         INTO  rec_.person_id, rec_.comm_line_id
         FROM  pers_comms_work_tab
         WHERE rowkey = rowkey_;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rec_.person_id, rec_.comm_line_id, 'Get_Key_By_Rowkey');
   END Base;

BEGIN
   RETURN Base(rowkey_);
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER )
   IS
   BEGIN
      IF (NOT Check_Exist___(person_id_, comm_line_id_)) THEN
         Raise_Record_Not_Exist___(person_id_, comm_line_id_);
      END IF;
   END Base;

BEGIN
   Base(person_id_, comm_line_id_);
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Check_Exist___(person_id_, comm_line_id_);
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Exists;


--@IgnoreMissingSysinit
FUNCTION Get_Company_Id (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ pers_comms_work_tab.company_id%TYPE;
   BEGIN
      IF (person_id_ IS NULL OR comm_line_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT company_id
         INTO  temp_
         FROM  pers_comms_work_tab
         WHERE person_id = person_id_
         AND   comm_line_id = comm_line_id_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Get_Company_Id');
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Get_Company_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Company_Office (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ pers_comms_work_tab.company_office%TYPE;
   BEGIN
      IF (person_id_ IS NULL OR comm_line_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT company_office
         INTO  temp_
         FROM  pers_comms_work_tab
         WHERE person_id = person_id_
         AND   comm_line_id = comm_line_id_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Get_Company_Office');
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Get_Company_Office;


--@IgnoreMissingSysinit
FUNCTION Get (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN Public_Rec
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN Public_Rec
   IS
      temp_ Public_Rec;
   BEGIN
      IF (person_id_ IS NULL OR comm_line_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT person_id, comm_line_id,
             rowid, rowversion, rowkey,
             company_id, 
             company_office
         INTO  temp_
         FROM  pers_comms_work_tab
         WHERE person_id = person_id_
         AND   comm_line_id = comm_line_id_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Get');
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      rowkey_ pers_comms_work_tab.rowkey%TYPE;
   BEGIN
      IF (person_id_ IS NULL OR comm_line_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rowkey
         INTO  rowkey_
         FROM  pers_comms_work_tab
         WHERE person_id = person_id_
         AND   comm_line_id = comm_line_id_;
      RETURN rowkey_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Get_Objkey');
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2 )
   IS
      dummy_ pers_comms_work_tab%ROWTYPE;
   BEGIN
      dummy_ := Lock_By_Id___(objid_, objversion_);
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   Base(info_, objid_, objversion_);
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   pers_comms_work_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'New__');
   Base(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   pers_comms_work_tab%ROWTYPE;
      newrec_   pers_comms_work_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Modify__');
   Base(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ pers_comms_work_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Remove__');
   Base(info_, objid_, objversion_, action_);
END Remove__;


PROCEDURE Raise_Too_Many_Rows___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER,
      methodname_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Too_Many_Rows(Pers_Comms_Work_API.lu_name_, NULL, methodname_);
   END Base;

BEGIN
   Base(person_id_, comm_line_id_, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Not_Exist(Pers_Comms_Work_API.lu_name_);
   END Base;

BEGIN
   Base(person_id_, comm_line_id_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ pers_comms_work_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ pers_comms_work_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Exist(Pers_Comms_Work_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Exist___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      name_ IN VARCHAR2,
      value_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Item_Format(Pers_Comms_Work_API.lu_name_, name_, value_);
   END Base;

BEGIN
   Base(name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ pers_comms_work_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ pers_comms_work_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Modified(Pers_Comms_Work_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Locked(Pers_Comms_Work_API.lu_name_);
   END Base;

BEGIN
   Base(person_id_, comm_line_id_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Removed(Pers_Comms_Work_API.lu_name_);
   END Base;

BEGIN
   Base(person_id_, comm_line_id_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_      IN VARCHAR2,
      objversion_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        pers_comms_work_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      SELECT *
         INTO  rec_
         FROM  pers_comms_work_tab
         WHERE rowid = objid_
         AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Error_SYS.Record_Locked(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
      WHEN no_data_found THEN
         BEGIN
            SELECT 1
               INTO  dummy_
               FROM  pers_comms_work_tab
               WHERE rowid = objid_;
            Raise_Record_Modified___(rec_);
         EXCEPTION
            WHEN no_data_found THEN
               Error_SYS.Record_Removed(lu_name_);
            WHEN too_many_rows THEN
               Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
         END;
   END Base;

BEGIN
   RETURN Base(objid_, objversion_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER) RETURN pers_comms_work_tab%ROWTYPE
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER) RETURN pers_comms_work_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        pers_comms_work_tab%ROWTYPE;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  pers_comms_work_tab
            WHERE person_id = person_id_
            AND   comm_line_id = comm_line_id_
            FOR UPDATE;
         RETURN rec_;
      EXCEPTION
         WHEN no_data_found THEN
            Raise_Record_Removed___(person_id_, comm_line_id_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Lock_By_Keys___');
      END;
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER) RETURN pers_comms_work_tab%ROWTYPE
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER) RETURN pers_comms_work_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        pers_comms_work_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  pers_comms_work_tab
            WHERE person_id = person_id_
            AND   comm_line_id = comm_line_id_
            FOR UPDATE NOWAIT;
         RETURN rec_;
      EXCEPTION
         WHEN row_locked THEN
            Error_SYS.Record_Locked(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Lock_By_Keys___');
         WHEN no_data_found THEN
            BEGIN
               SELECT 1
                  INTO  dummy_
                  FROM  pers_comms_work_tab
                  WHERE person_id = person_id_
                  AND   comm_line_id = comm_line_id_;
               Raise_Record_Modified___(rec_);
            EXCEPTION
               WHEN no_data_found THEN
                  Raise_Record_Removed___(person_id_, comm_line_id_);
               WHEN too_many_rows THEN
                  Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Lock_By_Keys___');
            END;
      END;
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_ IN VARCHAR2 ) RETURN pers_comms_work_tab%ROWTYPE
   IS
      lu_rec_ pers_comms_work_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  pers_comms_work_tab
         WHERE rowid = objid_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Error_SYS.Record_Removed(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, 'Get_Object_By_Id___');
   END Base;

BEGIN
   RETURN Base(objid_);
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN pers_comms_work_tab%ROWTYPE
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN pers_comms_work_tab%ROWTYPE
   IS
      lu_rec_ pers_comms_work_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  pers_comms_work_tab
         WHERE person_id = person_id_
         AND   comm_line_id = comm_line_id_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN lu_rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Get_Object_By_Keys___');
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
   BEGIN
      SELECT 1
         INTO  dummy_
         FROM  pers_comms_work_tab
         WHERE person_id = person_id_
         AND   comm_line_id = comm_line_id_;
      RETURN TRUE;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN FALSE;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Check_Exist___');
   END Base;

BEGIN
   RETURN Base(person_id_, comm_line_id_);
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objversion_
         FROM  pers_comms_work_tab
         WHERE rowid = objid_;
   EXCEPTION
      WHEN no_data_found THEN
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, 'Get_Version_By_Id___');
   END Base;

BEGIN
   Base(objid_, objversion_);
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      objid_      IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER )
   IS
   BEGIN
      SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objid_, objversion_
         FROM  pers_comms_work_tab
         WHERE person_id = person_id_
         AND   comm_line_id = comm_line_id_;
   EXCEPTION
      WHEN no_data_found THEN
         objid_      := NULL;
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(person_id_, comm_line_id_, 'Get_Id_Version_By_Keys___');
   END Base;

BEGIN
   Base(objid_, objversion_, person_id_, comm_line_id_);
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('PERSON_ID') THEN
            newrec_.person_id := value_;
            indrec_.person_id := TRUE;
         WHEN ('COMM_LINE_ID') THEN
            newrec_.comm_line_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.comm_line_id := TRUE;
         WHEN ('COMPANY_ID') THEN
            newrec_.company_id := value_;
            indrec_.company_id := TRUE;
         WHEN ('COMPANY_OFFICE') THEN
            newrec_.company_office := value_;
            indrec_.company_office := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (rec_.person_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('PERSON_ID', rec_.person_id, attr_);
      END IF;
      IF (rec_.comm_line_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('COMM_LINE_ID', rec_.comm_line_id, attr_);
      END IF;
      IF (rec_.company_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('COMPANY_ID', rec_.company_id, attr_);
      END IF;
      IF (rec_.company_office IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('COMPANY_OFFICE', rec_.company_office, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack___;


FUNCTION Pack___ (
   rec_ IN pers_comms_work_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN pers_comms_work_tab%ROWTYPE,
      indrec_ IN Indicator_Rec ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (indrec_.person_id) THEN
         Client_SYS.Add_To_Attr('PERSON_ID', rec_.person_id, attr_);
      END IF;
      IF (indrec_.comm_line_id) THEN
         Client_SYS.Add_To_Attr('COMM_LINE_ID', rec_.comm_line_id, attr_);
      END IF;
      IF (indrec_.company_id) THEN
         Client_SYS.Add_To_Attr('COMPANY_ID', rec_.company_id, attr_);
      END IF;
      IF (indrec_.company_office) THEN
         Client_SYS.Add_To_Attr('COMPANY_OFFICE', rec_.company_office, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_, indrec_);
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('PERSON_ID', rec_.person_id, attr_);
      Client_SYS.Add_To_Attr('COMM_LINE_ID', rec_.comm_line_id, attr_);
      Client_SYS.Add_To_Attr('COMPANY_ID', rec_.company_id, attr_);
      Client_SYS.Add_To_Attr('COMPANY_OFFICE', rec_.company_office, attr_);
      Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack_Table___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   
   PROCEDURE Base (
      indrec_ IN OUT NOCOPY Indicator_Rec )
   IS
      empty_indrec_ Indicator_Rec;
   BEGIN
      indrec_ := empty_indrec_;
   END Base;

BEGIN
   Base(indrec_);
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      rec_ IN pers_comms_work_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.person_id := rec_.person_id IS NOT NULL;
      indrec_.comm_line_id := rec_.comm_line_id IS NOT NULL;
      indrec_.company_id := rec_.company_id IS NOT NULL;
      indrec_.company_office := rec_.company_office IS NOT NULL;
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN pers_comms_work_tab%ROWTYPE,
   newrec_ IN pers_comms_work_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      oldrec_ IN pers_comms_work_tab%ROWTYPE,
      newrec_ IN pers_comms_work_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.person_id := Validate_SYS.Is_Changed(oldrec_.person_id, newrec_.person_id);
      indrec_.comm_line_id := Validate_SYS.Is_Changed(oldrec_.comm_line_id, newrec_.comm_line_id);
      indrec_.company_id := Validate_SYS.Is_Changed(oldrec_.company_id, newrec_.company_id);
      indrec_.company_office := Validate_SYS.Is_Changed(oldrec_.company_office, newrec_.company_office);
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(oldrec_, newrec_);
END Get_Indicator_Rec___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

BEGIN
   Base(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ pers_comms_work_tab%ROWTYPE;
   BEGIN
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      newrec_.person_id := upper(newrec_.person_id);
      newrec_.company_office := upper(newrec_.company_office);
      INSERT
         INTO pers_comms_work_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'PERS_COMMS_WORK_RK') THEN
               Error_SYS.Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE )
   IS
      attr_    VARCHAR2(32000);
      indrec_  Indicator_Rec;
   BEGIN
      Prepare_Insert___(attr_);
      Unpack___(newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE )
   IS
      objid_         VARCHAR2(20);
      objversion_    VARCHAR2(100);
      attr_          VARCHAR2(32000);
      indrec_        Indicator_Rec;
      emptyrec_      pers_comms_work_tab%ROWTYPE;
   BEGIN
      indrec_ := Get_Indicator_Rec___(emptyrec_, newrec_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END New___;


PROCEDURE Check_Update___ (
   oldrec_ IN     pers_comms_work_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     pers_comms_work_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'PERSON_ID', indrec_.person_id);
      Validate_SYS.Item_Update(lu_name_, 'COMM_LINE_ID', indrec_.comm_line_id);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     pers_comms_work_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     pers_comms_work_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.person_id := upper(newrec_.person_id);
      newrec_.company_office := upper(newrec_.company_office);
      IF by_keys_ THEN
         UPDATE pers_comms_work_tab
            SET ROW = newrec_
            WHERE person_id = newrec_.person_id
            AND   comm_line_id = newrec_.comm_line_id;
      ELSE
         UPDATE pers_comms_work_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'PERS_COMMS_WORK_RK') THEN
               Error_SYS.Rowkey_Exist(Pers_Comms_Work_API.lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      newrec_         IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      objid_      VARCHAR2(20);
      objversion_ VARCHAR2(100);
      attr_       VARCHAR2(32000);
      indrec_     Indicator_rec;
      oldrec_     pers_comms_work_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(newrec_.person_id, newrec_.comm_line_id);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(newrec_.person_id, newrec_.comm_line_id);
      END IF;
      indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Base;

BEGIN
   Base(newrec_, lock_mode_wait_);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN pers_comms_work_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN pers_comms_work_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.person_id||'^'||remrec_.comm_line_id||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

BEGIN
   Base(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN pers_comms_work_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN pers_comms_work_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.person_id||'^'||remrec_.comm_line_id||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  pers_comms_work_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  pers_comms_work_tab
            WHERE person_id = remrec_.person_id
            AND   comm_line_id = remrec_.comm_line_id;
      END IF;
   END Base;

BEGIN
   Base(objid_, remrec_);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN pers_comms_work_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN pers_comms_work_tab%ROWTYPE )
   IS
   BEGIN
      Delete___(NULL, remrec_);
   END Base;

BEGIN
   Base(remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      remrec_         IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      oldrec_     pers_comms_work_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(remrec_.person_id, remrec_.comm_line_id);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(remrec_.person_id, remrec_.comm_line_id);
      END IF;
      Check_Delete___(oldrec_);
      Delete___(NULL, oldrec_);
   END Base;

BEGIN
   Base(remrec_, lock_mode_wait_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE New (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER,
   company_id_ IN VARCHAR2,
   company_office_ IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER,
      company_id_ IN VARCHAR2,
      company_office_ IN VARCHAR2 )
   IS
      newrec_ PERS_COMMS_WORK_TAB%ROWTYPE;
      attr_   VARCHAR2(2000);
      objid_        VARCHAR2(100);
      objversion_   VARCHAR2(200);
      indrec_   Indicator_Rec;
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('PERSON_ID', person_id_, attr_);
      Client_SYS.Add_To_Attr('COMM_LINE_ID', comm_line_id_, attr_);
      Client_SYS.Add_To_Attr('COMPANY_ID', company_id_, attr_);
      Client_SYS.Add_To_Attr('COMPANY_OFFICE', company_office_, attr_);
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'New');
   Core(person_id_, comm_line_id_, company_id_, company_office_);
END New;


PROCEDURE Modify (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER,
   company_id_ IN VARCHAR2,
   company_office_ IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER,
      company_id_ IN VARCHAR2,
      company_office_ IN VARCHAR2 )
   IS
      oldrec_ PERS_COMMS_WORK_TAB%ROWTYPE;
      newrec_ PERS_COMMS_WORK_TAB%ROWTYPE;
      attr_   VARCHAR2(2000);
      objid_        VARCHAR2(100);
      objversion_   VARCHAR2(200);
      indrec_   Indicator_Rec;
   BEGIN
      oldrec_ := Lock_By_Keys___(person_id_, comm_line_id_);
      Get_Id_Version_By_Keys___(objid_, objversion_, person_id_, comm_line_id_);
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('COMPANY_ID', company_id_, attr_);
      Client_SYS.Add_To_Attr('COMPANY_OFFICE', company_office_, attr_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Modify');
   Core(person_id_, comm_line_id_, company_id_, company_office_);
END Modify;


PROCEDURE Remove (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER )
   IS
      objid_       VARCHAR2(100);
      objversion_  VARCHAR2(200);
      remrec_ PERS_COMMS_WORK_TAB%ROWTYPE;
   BEGIN
      Get_Id_Version_By_Keys___(objid_, objversion_, person_id_, comm_line_id_);
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Remove');
   Core(person_id_, comm_line_id_);
END Remove;


FUNCTION Exist2 (
   person_id_ IN VARCHAR2,
   comm_line_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      person_id_ IN VARCHAR2,
      comm_line_id_ IN NUMBER ) RETURN VARCHAR2
   IS
   BEGIN
      IF (Check_Exist___(person_id_, comm_line_id_)) THEN
         RETURN 'TRUE';
      END IF;
      RETURN 'FALSE';
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Exist2');
   RETURN Core(person_id_, comm_line_id_);
END Exist2;


FUNCTION Get_Work_Phone (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      value_  VARCHAR2(2000);
   BEGIN
      value_ := Get_Work_Phone_In_All_States(company_id_, emp_no_);
      RETURN value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Phone');
   RETURN Core(company_id_, emp_no_);
END Get_Work_Phone;


FUNCTION Get_Work_Mobile (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      value_            VARCHAR2(2000);
      CURSOR get_company_office
      IS
      SELECT company_office
      FROM  company_person_pub p
      WHERE company_id = company_id_
      AND emp_no = emp_no_;
      office_comm_val_  PERS_COMMS.Comm_Data%TYPE;
      company_office_   COMPANY_PERSON_TAB.Company_Office%TYPE;
      person_id_        PERS_TAB.Person_Id%TYPE;
   BEGIN
      value_ := Get_Emp_Work_Comm_Value___(company_id_, emp_no_, 'MOBILE');
      IF (value_ IS NULL) THEN
         person_id_ := Company_Emp_API.Get_Person_Id(company_id_, emp_no_);
         value_     := Comm_Method_API.Get_Default_Value_Person(person_id_, 'MOBILE', address_type_ => Address_Type_Code_API.Decode('WORK'));
         IF (value_ IS NULL) THEN
            OPEN get_company_office;
            FETCH get_company_office INTO company_office_;
            CLOSE get_company_office;
            IF (company_office_ IS NOT NULL) THEN
               office_comm_val_ := Company_Address_API.Get_Mobile( company_id_,
                                                                  Company_Work_Location_API.Get_Address_Id(company_id_, company_office_));
               IF (office_comm_val_ IS NOT NULL) THEN
                  RETURN office_comm_val_;
               END IF;
            END IF;
            value_ := Comm_Method_API.Get_Default_Mobile('COMPANY',company_id_);
         END IF;
      END IF;
      RETURN value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Mobile');
   RETURN Core(company_id_, emp_no_);
END Get_Work_Mobile;


FUNCTION Get_Work_Email (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      value_            VARCHAR2(2000);
      CURSOR get_company_office
      IS
      SELECT company_office
      FROM  company_person_pub p
      WHERE company_id = company_id_
      AND emp_no = emp_no_;
      office_comm_val_  PERS_COMMS.Comm_Data%TYPE;
      company_office_   COMPANY_PERSON_TAB.Company_Office%TYPE;
      person_id_        PERS_TAB.Person_Id%TYPE;
   BEGIN
      value_ := Get_Emp_Work_Comm_Value___(company_id_, emp_no_, 'E_MAIL');
      IF (value_ IS NULL) THEN
         person_id_ := Company_Emp_API.Get_Person_Id(company_id_, emp_no_);
         value_     := Comm_Method_API.Get_Default_Value_Person(person_id_, 'E_MAIL', address_type_ => Address_Type_Code_API.Decode('WORK'));
         IF (value_ IS NULL) THEN
            OPEN get_company_office;
            FETCH get_company_office INTO company_office_;
            CLOSE get_company_office;
            IF (company_office_ IS NOT NULL) THEN
               office_comm_val_ := Company_Address_API.Get_E_Mail( company_id_,
                                                                  Company_Work_Location_API.Get_Address_Id(company_id_, company_office_));
               IF (office_comm_val_ IS NOT NULL) THEN
                  RETURN office_comm_val_;
               END IF;
            END IF;
            value_ := Comm_Method_API.Get_Default_Email('COMPANY',company_id_);
         END IF;
      END IF;
      RETURN value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Email');
   RETURN Core(company_id_, emp_no_);
END Get_Work_Email;


FUNCTION Get_Work_Fax (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      value_  VARCHAR2(2000);
   BEGIN
      value_ := Get_Work_Fax_In_All_States(company_id_, emp_no_);
      RETURN value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Fax');
   RETURN Core(company_id_, emp_no_);
END Get_Work_Fax;


FUNCTION Get_Work_Address (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
    CURSOR get_company_office
    IS
    SELECT company_office
    FROM COMPANY_PERSON_DUP
    WHERE company_id = company_id_
    AND emp_no = emp_no_;
    address_ Pers_Comms.comm_data%TYPE;
    company_office_ company_person.company_office%TYPE;
   BEGIN
    OPEN get_company_office;
    FETCH get_company_office INTO company_office_;
    CLOSE get_company_office;
    address_ := Pers_Comms_Work_Api.Get_Work_Address_Formated(company_id_ ,
                Company_work_location_Api.Get_Address_Id(company_id_, company_office_));
    IF company_office_ IS NOT NULL THEN
     RETURN address_;
    END IF;
    RETURN Pers_Comms_Work_Api.Get_Work_Address_Formated(company_id_ ,
     Company_Address_Api.Get_Default_Address(company_id_, Address_Type_Code_Api.Decode('VISIT')));
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Address');
   RETURN Core(company_id_, emp_no_);
END Get_Work_Address;


FUNCTION Get_Work_Address_Formated (
   company_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      address_id_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
     address1_     VARCHAR2(35);
     address2_     VARCHAR2(35);
     city_         VARCHAR2(35);
     county_       VARCHAR2(35);
     state_        VARCHAR2(35);
     zip_code_     VARCHAR2(35);
     country_      VARCHAR2(50);
     company_country_code_ VARCHAR2(10);
     address_      VARCHAR2(2000);
   BEGIN
      -- Get address fields for Address ID
      address1_ := Company_Address_API.Get_Address1(company_id_,address_id_);
      address2_ := Company_Address_API.Get_Address2(company_id_,address_id_);
      city_     := Company_Address_API.Get_City(company_id_, address_id_);
      county_   := Company_Address_API.Get_County(company_id_,address_id_);
      state_    := Company_Address_API.Get_State(company_id_, address_id_);
      zip_code_ := Company_Address_API.Get_Zip_Code(company_id_,address_id_);
      country_  := Company_Address_API.Get_Country(company_id_,address_id_);
      -- Get Country for Address Layout (Current Company Layout)
      company_country_code_ := Company_Address_API.Get_Country_Db(company_id_,address_id_);
      -- Format Address
      address_ := Address_Presentation_API.Format_Address(company_country_code_ ,address1_,
                  address2_, city_, county_, state_, zip_code_, country_ );
      RETURN address_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Address_Formated');
   RETURN Core(company_id_, address_id_);
END Get_Work_Address_Formated;


FUNCTION Get_Pers_Work_Phone (
   person_id_ IN VARCHAR2,
   company_id_ IN VARCHAR2,
   company_office_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      person_id_ IN VARCHAR2,
      company_id_ IN VARCHAR2,
      company_office_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      emp_no_     COMPANY_EMP_TAB.EMPLOYEE_ID%TYPE;
      CURSOR get_emp IS
         SELECT ce.employee_id
         FROM   COMPANY_EMP_TAB ce, COMPANY_PERSON_TAB cp
         WHERE  ce.company        = company_id_
         AND    ce.person_id      = person_id_
         AND    ce.employee_id    = cp.emp_no
         AND    ce.company        = cp.company_id
         AND    (Employee_Work_Location_API.Get_Current_Work_Location(ce.company, ce.employee_id) = company_office_ 
                OR cp.company_office  IS NULL);
      com_data_value_ Pers_Comms.comm_data%TYPE;
   BEGIN
      OPEN  get_emp;
      FETCH get_emp INTO emp_no_;
      CLOSE get_emp;
      IF (emp_no_ IS NOT NULL) THEN
         com_data_value_ := Get_Emp_Work_Comm_Value___(company_id_, emp_no_, 'PHONE');
      END IF;
      IF (com_data_value_ IS NULL) THEN
         com_data_value_ := Comm_Method_API.Get_Default_Value_Person(person_id_, 'PHONE', address_type_ => Address_Type_Code_API.Decode('WORK'));
      END IF;
      RETURN com_data_value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Pers_Work_Phone');
   RETURN Core(person_id_, company_id_, company_office_);
END Get_Pers_Work_Phone;


FUNCTION Get_Pers_Work_Mobile (
   person_id_ IN VARCHAR2,
   company_id_ IN VARCHAR2,
   company_office_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      person_id_ IN VARCHAR2,
      company_id_ IN VARCHAR2,
      company_office_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      emp_no_     COMPANY_EMP_TAB.EMPLOYEE_ID%TYPE;
      CURSOR get_emp IS
         SELECT ce.employee_id
         FROM   COMPANY_EMP_TAB ce, COMPANY_PERSON_TAB cp
         WHERE  ce.company        = company_id_
         AND    ce.person_id      = person_id_
         AND    ce.employee_id    = cp.emp_no
         AND    ce.company        = cp.company_id
         AND    (Employee_Work_Location_API.Get_Current_Work_Location(ce.company, ce.employee_id) = company_office_ 
                OR cp.company_office  IS NULL);
     com_data_value_ Pers_Comms.comm_data%TYPE;
   BEGIN
      OPEN  get_emp;
      FETCH get_emp INTO emp_no_;
      CLOSE get_emp;
      IF (emp_no_ IS NOT NULL) THEN
         com_data_value_ := Get_Emp_Work_Comm_Value___(company_id_, emp_no_, 'MOBILE');
      END IF;
      IF (com_data_value_ IS NULL) THEN
         com_data_value_ := Comm_Method_API.Get_Default_Value_Person(person_id_, 'MOBILE', address_type_ => Address_Type_Code_API.Decode('WORK'));
      END IF;
      RETURN com_data_value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Pers_Work_Mobile');
   RETURN Core(person_id_, company_id_, company_office_);
END Get_Pers_Work_Mobile;


FUNCTION Get_Pers_Work_Email (
   person_id_ IN VARCHAR2,
   company_id_ IN VARCHAR2,
   company_office_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      person_id_ IN VARCHAR2,
      company_id_ IN VARCHAR2,
      company_office_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      emp_no_     COMPANY_EMP_TAB.EMPLOYEE_ID%TYPE;
      CURSOR get_emp IS
         SELECT ce.employee_id
         FROM   COMPANY_EMP_TAB ce, COMPANY_PERSON_TAB cp
         WHERE  ce.company        = company_id_
         AND    ce.person_id      = person_id_
         AND    ce.employee_id    = cp.emp_no
         AND    ce.company        = cp.company_id
         AND    (Employee_Work_Location_API.Get_Current_Work_Location(ce.company,ce.employee_id) = company_office_ 
                OR cp.company_office  IS NULL);
      com_data_value_ Pers_Comms.comm_data%TYPE;
   BEGIN
      OPEN  get_emp;
      FETCH get_emp INTO emp_no_;
      CLOSE get_emp;
      IF (emp_no_ IS NOT NULL) THEN
         com_data_value_ := Get_Emp_Work_Comm_Value___(company_id_, emp_no_, 'E_MAIL');
      END IF;
      IF (com_data_value_ IS NULL) THEN
         com_data_value_ := Comm_Method_API.Get_Default_Value_Person(person_id_, 'E_MAIL', address_type_ => Address_Type_Code_API.Decode('WORK'));
      END IF;
      RETURN com_data_value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Pers_Work_Email');
   RETURN Core(person_id_, company_id_, company_office_);
END Get_Pers_Work_Email;


FUNCTION Get_Work_Address_In_All_States (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
    CURSOR get_company_office
    IS
    SELECT company_office
    FROM  company_person_pub
    WHERE company_id = company_id_
    AND emp_no = emp_no_;
    address_ Pers_Comms.comm_data%TYPE;
    company_office_ company_person.company_office%TYPE;
    --Bug 101914, start
    person_id_        PERS_TAB.Person_Id%TYPE;
    address_id_       PERSON_INFO_ADDRESS_TAB.address_id%TYPE;
    --Bug 101914, end 
   BEGIN
    --Bug 101914, start
    person_id_    := Company_Emp_API.Get_Person_Id(company_id_, emp_no_);
    address_id_   := Person_Info_Address_API.Get_Default_Address(person_id_,Address_Type_Code_API.Decode('WORK'));
    IF(address_id_ IS NULL)THEN   
      OPEN get_company_office;
      FETCH get_company_office INTO company_office_;
      CLOSE get_company_office;
      address_ := Pers_Comms_Work_API.Get_Work_Address_Formated(company_id_ ,
                Company_work_location_API.Get_Address_Id(company_id_, company_office_));
      IF company_office_ IS NOT NULL THEN
        RETURN address_;
      END IF;
      RETURN Pers_Comms_Work_API.Get_Work_Address_Formated(company_id_ ,
             Company_Address_API.Get_Default_Address(company_id_, Address_Type_Code_API.Decode('VISIT')));
    ELSE
       RETURN Person_Info_Address_API.Get_Address_Form(person_id_,address_id_);
    END IF; 
    --Bug 101914, end 
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Address_In_All_States');
   RETURN Core(company_id_, emp_no_);
END Get_Work_Address_In_All_States;


--@IgnoreMissingSysinit
FUNCTION Get_Work_Phone_In_All_States (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      value_            VARCHAR2(2000);
      CURSOR get_company_office
      IS
      SELECT company_office
      FROM   company_person_pub p
      WHERE  company_id = company_id_
      AND    emp_no     = emp_no_;
      office_comm_val_  PERS_COMMS.Comm_Data%TYPE;
      company_office_   COMPANY_PERSON_TAB.Company_Office%TYPE;
      person_id_        PERS_TAB.Person_Id%TYPE;
   BEGIN
      value_ := Get_Emp_Work_Comm_Value___(company_id_, emp_no_, 'PHONE');
      IF (value_ IS NULL) THEN
         person_id_ := Company_Emp_API.Get_Person_Id(company_id_, emp_no_);
         value_     := Comm_Method_API.Get_Default_Value_Person(person_id_, 'PHONE', address_type_ => Address_Type_Code_API.Decode('WORK'));
         IF (value_ IS NULL) THEN
            OPEN get_company_office;
            FETCH get_company_office INTO company_office_;
            CLOSE get_company_office;
            IF (company_office_ IS NOT NULL) THEN
               office_comm_val_ := Company_Address_API.Get_Phone( company_id_,
                                                                  Company_Work_Location_API.Get_Address_Id(company_id_, company_office_));
               IF (office_comm_val_ IS NOT NULL) THEN
                  RETURN office_comm_val_;
               END IF;
            END IF;
            value_ := Comm_Method_API.Get_Default_Phone('COMPANY',company_id_);
         END IF;
      END IF;
      RETURN value_;
   END Core;

BEGIN
   RETURN Core(company_id_, emp_no_);
END Get_Work_Phone_In_All_States;


FUNCTION Get_Work_Fax_In_All_States (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      value_            VARCHAR2(2000);
      CURSOR get_company_office
      IS
      SELECT company_office
      FROM   company_person_pub p
      WHERE  company_id = company_id_
      AND    emp_no     = emp_no_;
      office_comm_val_  PERS_COMMS.Comm_Data%TYPE;
      company_office_   COMPANY_PERSON_TAB.Company_Office%TYPE;
      person_id_        PERS_TAB.Person_Id%TYPE;
   
   BEGIN
      value_ := Get_Emp_Work_Comm_Value___(company_id_, emp_no_, 'FAX');
      IF (value_ IS NULL) THEN
         person_id_ := Company_Emp_API.Get_Person_Id(company_id_, emp_no_);
         value_     := Comm_Method_API.Get_Default_Value_Person(person_id_, 'FAX', address_type_ => Address_Type_Code_API.Decode('WORK'));
         IF (value_ IS NULL) THEN
            OPEN get_company_office;
            FETCH get_company_office INTO company_office_;
            CLOSE get_company_office;
            IF (company_office_ IS NOT NULL) THEN
               office_comm_val_ := Company_Address_API.Get_Fax( company_id_,
                                                                  Company_Work_Location_API.Get_Address_Id(company_id_, company_office_));
               IF (office_comm_val_ IS NOT NULL) THEN
                  RETURN office_comm_val_;
               END IF;
            END IF;
            value_ := Comm_Method_API.Get_Default_Fax('COMPANY',company_id_);
         END IF;
      END IF;
      RETURN value_;
   END Core;

BEGIN
   General_SYS.Init_Method(Pers_Comms_Work_API.lu_name_, 'Pers_Comms_Work_API', 'Get_Work_Fax_In_All_States');
   RETURN Core(company_id_, emp_no_);
END Get_Work_Fax_In_All_States;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Check_Common___ (
   oldrec_ IN     pers_comms_work_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     pers_comms_work_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.person_id IS NOT NULL AND newrec_.comm_line_id IS NOT NULL)
      AND (indrec_.person_id OR indrec_.comm_line_id)
      AND (Validate_SYS.Is_Changed(oldrec_.person_id, newrec_.person_id)
        OR Validate_SYS.Is_Changed(oldrec_.comm_line_id, newrec_.comm_line_id)) THEN
         Pers_Comms_API.Exist(newrec_.person_id, newrec_.comm_line_id);
      END IF;
      IF (newrec_.company_id IS NOT NULL)
      AND (indrec_.company_id)
      AND (Validate_SYS.Is_Changed(oldrec_.company_id, newrec_.company_id)) THEN
         Person_Company_API.Exist(newrec_.company_id);
      END IF;
      IF (newrec_.company_office IS NOT NULL)
      AND (indrec_.company_office)
      AND (Validate_SYS.Is_Changed(oldrec_.company_office, newrec_.company_office)) THEN
         Work_Location_API.Exist(newrec_.company_office);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'PERSON_ID', newrec_.person_id);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     pers_comms_work_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY pers_comms_work_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(oldrec_, newrec_, indrec_, attr_);
      
       IF (newrec_.company_id IS NOT NULL AND newrec_.company_office IS NOT NULL) THEN
         Company_Work_Location_API.Exist(newrec_.company_id, newrec_.company_office);
      END IF;
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


FUNCTION Get_Emp_Work_Comm_Value___ (
   company_id_ IN VARCHAR2,
   emp_no_ IN VARCHAR2,
   method_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      company_id_ IN VARCHAR2,
      emp_no_ IN VARCHAR2,
      method_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      CURSOR get_value_company_office
      IS
      SELECT pc.comm_data, pc.comm_default_flag
      FROM pers_comms pc, company_person_pub p
      WHERE p.person_id = pc.person_id
      AND p.company_id = company_id_
      AND p.company_id = pc.company_id
      AND p.emp_no = emp_no_
      AND pc.method_id_db = method_
      AND pc.address_id IS NULL
      AND p.company_office = pc.company_office
      AND pc.valid_from <= SYSDATE
      AND pc.valid_to >= SYSDATE;
   
      CURSOR get_value_company_any_office
      IS
      SELECT pc.comm_data, pc.comm_default_flag
      FROM pers_comms pc, company_person_pub p
      WHERE p.person_id = pc.person_id
      AND p.company_id = company_id_
      AND p.company_id = pc.company_id
      AND p.emp_no = emp_no_
      AND pc.method_id_db = method_
      AND pc.company_office IS NULL
      AND pc.address_id IS NULL
      AND pc.valid_from <= SYSDATE
      AND pc.valid_to >= SYSDATE;
   
      value_            VARCHAR2(2000);
      temp_value_       VARCHAR2(2000);
      row_count_        NUMBER := 0;
   BEGIN
   
      FOR comm_methods_ IN get_value_company_office LOOP
         row_count_ := row_count_ + 1;
         temp_value_ := comm_methods_.comm_data;
         IF (comm_methods_.comm_default_flag = 1) THEN
            value_ := comm_methods_.comm_data;
         END IF;
      END LOOP;
   
      IF (row_count_ = 1) THEN
         --For the 1st Priority
         RETURN temp_value_;
      ELSIF (value_ IS NOT NULL) THEN
         --For the 2st Priority
         RETURN value_;
      END IF;
   
      row_count_ := 0;
      FOR comm_methods_ IN get_value_company_any_office LOOP
         row_count_ := row_count_ + 1;
         temp_value_ := comm_methods_.comm_data;
         IF (comm_methods_.comm_default_flag = 1) THEN
            value_ := comm_methods_.comm_data;
         END IF;
      END LOOP;
   
      IF (row_count_ = 1) THEN
         --For the 4th Priority
         RETURN temp_value_;
      ELSIF (value_ IS NOT NULL) THEN
         --For the 3rd Priority
         RETURN value_;
      END IF;
   
      RETURN value_;
   
   END Core;

BEGIN
   RETURN Core(company_id_, emp_no_, method_);
END Get_Emp_Work_Comm_Value___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
   
   PROCEDURE Base
   IS
   BEGIN
      NULL;
   END Base;

BEGIN
   Base;
END Init;

BEGIN
   Init;
END Pers_Comms_Work_API;