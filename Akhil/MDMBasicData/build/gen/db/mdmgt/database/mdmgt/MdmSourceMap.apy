-----------------------------------------------------------------------------
--
--  Logical unit: MdmSourceMap
--  Type:         Entity
--  Component:    MDMGT
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PRIVATE VIEW DEFINITIONS -------------------------------
-----------------------------------------------------------------------------

PROMPT Creating MDM_SOURCE_MAP view

CREATE OR REPLACE VIEW MDM_SOURCE_MAP AS
SELECT
       template_id                    template_id,
       revision                       revision,
       column_name                    column_name,
       description                    description,
       data_type                      data_type,
       length                         length,
       default_value                  default_value,
       flags                          flags,
       note_text                      note_text,
       db_client_values               db_client_values,
       mandatory                      mandatory,
       rowkey                         objkey,
       to_char(rowversion,'YYYYMMDDHH24MISS') objversion,
       rowid                          objid
FROM   mdm_source_map_tab
WITH   READ ONLY;

COMMENT ON TABLE MDM_SOURCE_MAP
   IS 'LU=MdmSourceMap^PROMPT=Mdm Source Map^MODULE=MDMGT^';

COMMENT ON COLUMN MDM_SOURCE_MAP.template_id
   IS 'FLAGS=PMI-L^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Template Id^';
COMMENT ON COLUMN MDM_SOURCE_MAP.revision
   IS 'FLAGS=PMI-L^DATATYPE=NUMBER^PROMPT=Revision^REF=MdmBasicDataHeader(template_id)^';
COMMENT ON COLUMN MDM_SOURCE_MAP.column_name
   IS 'FLAGS=KMI-L^DATATYPE=STRING(2000)/UPPERCASE^PROMPT=Column Name^';
COMMENT ON COLUMN MDM_SOURCE_MAP.description
   IS 'FLAGS=A-IUL^DATATYPE=STRING(100)^PROMPT=Description^';
COMMENT ON COLUMN MDM_SOURCE_MAP.data_type
   IS 'FLAGS=AMIU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Data Type^';
COMMENT ON COLUMN MDM_SOURCE_MAP.length
   IS 'FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Length^';
COMMENT ON COLUMN MDM_SOURCE_MAP.default_value
   IS 'FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Default Value^';
COMMENT ON COLUMN MDM_SOURCE_MAP.flags
   IS 'FLAGS=A-I--^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Flags^';
COMMENT ON COLUMN MDM_SOURCE_MAP.note_text
   IS 'FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Note Text^';
COMMENT ON COLUMN MDM_SOURCE_MAP.db_client_values
   IS 'FLAGS=A-I--^DATATYPE=STRING(2000)^PROMPT=Db Client Values^';
COMMENT ON COLUMN MDM_SOURCE_MAP.mandatory
   IS 'FLAGS=A--U-^DATATYPE=BOOLEAN^PROMPT=Mandatory^';


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Mdm_Source_Map_API implementation

CREATE OR REPLACE PACKAGE BODY Mdm_Source_Map_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (template_id                    BOOLEAN := FALSE,
   revision                       BOOLEAN := FALSE,
   column_name                    BOOLEAN := FALSE,
   description                    BOOLEAN := FALSE,
   data_type                      BOOLEAN := FALSE,
   length                         BOOLEAN := FALSE,
   default_value                  BOOLEAN := FALSE,
   flags                          BOOLEAN := FALSE,
   note_text                      BOOLEAN := FALSE,
   db_client_values               BOOLEAN := FALSE,
   mandatory                      BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Raise_Too_Many_Rows___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ mdm_source_map_tab%ROWTYPE );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ mdm_source_map_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2) RETURN mdm_source_map_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2) RETURN mdm_source_map_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN mdm_source_map_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN VARCHAR2;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN mdm_source_map_tab%ROWTYPE,
   newrec_ IN mdm_source_map_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     mdm_source_map_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     mdm_source_map_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     mdm_source_map_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN mdm_source_map_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN mdm_source_map_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN mdm_source_map_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rowkey_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
   IS
      rec_ mdm_source_map_tab%ROWTYPE;
   BEGIN
      SELECT template_id, revision, column_name
         INTO  rec_.template_id, rec_.revision, rec_.column_name
         FROM  mdm_source_map_tab
         WHERE rowkey = rowkey_;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rec_.template_id, rec_.revision, rec_.column_name, 'Get_Key_By_Rowkey');
   END Base;

BEGIN
   RETURN Base(rowkey_);
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 )
   IS
   BEGIN
      IF (NOT Check_Exist___(template_id_, revision_, column_name_)) THEN
         Raise_Record_Not_Exist___(template_id_, revision_, column_name_);
      END IF;
   END Base;

BEGIN
   Base(template_id_, revision_, column_name_);
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Check_Exist___(template_id_, revision_, column_name_);
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Exists;


--@IgnoreMissingSysinit
FUNCTION Get_Description (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ mdm_source_map_tab.description%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT description
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Description');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Description;


--@IgnoreMissingSysinit
FUNCTION Get_Data_Type (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ mdm_source_map_tab.data_type%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT data_type
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Data_Type');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Data_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Length (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN NUMBER
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN NUMBER
   IS
      temp_ mdm_source_map_tab.length%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT length
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Length');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Length;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Value (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ mdm_source_map_tab.default_value%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT default_value
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Default_Value');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Default_Value;


--@IgnoreMissingSysinit
FUNCTION Get_Flags (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ mdm_source_map_tab.flags%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT flags
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Flags');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Flags;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Text (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ mdm_source_map_tab.note_text%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT note_text
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Note_Text');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Note_Text;


--@IgnoreMissingSysinit
FUNCTION Get_Db_Client_Values (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ mdm_source_map_tab.db_client_values%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT db_client_values
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Db_Client_Values');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Db_Client_Values;


--@IgnoreMissingSysinit
FUNCTION Get_Mandatory (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ mdm_source_map_tab.mandatory%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT mandatory
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Mandatory');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Mandatory;


--@IgnoreMissingSysinit
FUNCTION Get (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN Public_Rec
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN Public_Rec
   IS
      temp_ Public_Rec;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT template_id, revision, column_name,
             rowid, rowversion, rowkey,
             description, 
             data_type, 
             length, 
             default_value, 
             flags, 
             note_text, 
             db_client_values, 
             mandatory
         INTO  temp_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      rowkey_ mdm_source_map_tab.rowkey%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL OR column_name_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rowkey
         INTO  rowkey_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN rowkey_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Objkey');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2 )
   IS
      dummy_ mdm_source_map_tab%ROWTYPE;
   BEGIN
      dummy_ := Lock_By_Id___(objid_, objversion_);
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   Base(info_, objid_, objversion_);
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   mdm_source_map_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Source_Map_API.lu_name_, 'Mdm_Source_Map_API', 'New__');
   Base(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   mdm_source_map_tab%ROWTYPE;
      newrec_   mdm_source_map_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Source_Map_API.lu_name_, 'Mdm_Source_Map_API', 'Modify__');
   Base(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ mdm_source_map_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Source_Map_API.lu_name_, 'Mdm_Source_Map_API', 'Remove__');
   Base(info_, objid_, objversion_, action_);
END Remove__;


PROCEDURE Raise_Too_Many_Rows___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2,
      methodname_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Too_Many_Rows(Mdm_Source_Map_API.lu_name_, NULL, methodname_);
   END Base;

BEGIN
   Base(template_id_, revision_, column_name_, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Record_Not_Exist(Mdm_Source_Map_API.lu_name_);
   END Base;

BEGIN
   Base(template_id_, revision_, column_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ mdm_source_map_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ mdm_source_map_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Exist(Mdm_Source_Map_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Exist___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      name_ IN VARCHAR2,
      value_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Item_Format(Mdm_Source_Map_API.lu_name_, name_, value_);
   END Base;

BEGIN
   Base(name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ mdm_source_map_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ mdm_source_map_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Modified(Mdm_Source_Map_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Record_Locked(Mdm_Source_Map_API.lu_name_);
   END Base;

BEGIN
   Base(template_id_, revision_, column_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Record_Removed(Mdm_Source_Map_API.lu_name_);
   END Base;

BEGIN
   Base(template_id_, revision_, column_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_      IN VARCHAR2,
      objversion_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        mdm_source_map_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      SELECT *
         INTO  rec_
         FROM  mdm_source_map_tab
         WHERE rowid = objid_
         AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Error_SYS.Record_Locked(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, NULL, 'Lock_By_Id___');
      WHEN no_data_found THEN
         BEGIN
            SELECT 1
               INTO  dummy_
               FROM  mdm_source_map_tab
               WHERE rowid = objid_;
            Raise_Record_Modified___(rec_);
         EXCEPTION
            WHEN no_data_found THEN
               Error_SYS.Record_Removed(lu_name_);
            WHEN too_many_rows THEN
               Raise_Too_Many_Rows___(NULL, NULL, NULL, 'Lock_By_Id___');
         END;
   END Base;

BEGIN
   RETURN Base(objid_, objversion_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2) RETURN mdm_source_map_tab%ROWTYPE
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2) RETURN mdm_source_map_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        mdm_source_map_tab%ROWTYPE;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  mdm_source_map_tab
            WHERE template_id = template_id_
            AND   revision = revision_
            AND   column_name = column_name_
            FOR UPDATE;
         RETURN rec_;
      EXCEPTION
         WHEN no_data_found THEN
            Raise_Record_Removed___(template_id_, revision_, column_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Lock_By_Keys___');
      END;
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2) RETURN mdm_source_map_tab%ROWTYPE
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2) RETURN mdm_source_map_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        mdm_source_map_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  mdm_source_map_tab
            WHERE template_id = template_id_
            AND   revision = revision_
            AND   column_name = column_name_
            FOR UPDATE NOWAIT;
         RETURN rec_;
      EXCEPTION
         WHEN row_locked THEN
            Error_SYS.Record_Locked(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Lock_By_Keys___');
         WHEN no_data_found THEN
            BEGIN
               SELECT 1
                  INTO  dummy_
                  FROM  mdm_source_map_tab
                  WHERE template_id = template_id_
                  AND   revision = revision_
                  AND   column_name = column_name_;
               Raise_Record_Modified___(rec_);
            EXCEPTION
               WHEN no_data_found THEN
                  Raise_Record_Removed___(template_id_, revision_, column_name_);
               WHEN too_many_rows THEN
                  Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Lock_By_Keys___');
            END;
      END;
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
   IS
      lu_rec_ mdm_source_map_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  mdm_source_map_tab
         WHERE rowid = objid_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Error_SYS.Record_Removed(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, NULL, 'Get_Object_By_Id___');
   END Base;

BEGIN
   RETURN Base(objid_);
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN mdm_source_map_tab%ROWTYPE
   IS
      lu_rec_ mdm_source_map_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN lu_rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Object_By_Keys___');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
   BEGIN
      SELECT 1
         INTO  dummy_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
      RETURN TRUE;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN FALSE;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Check_Exist___');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_, column_name_);
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objversion_
         FROM  mdm_source_map_tab
         WHERE rowid = objid_;
   EXCEPTION
      WHEN no_data_found THEN
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, NULL, 'Get_Version_By_Id___');
   END Base;

BEGIN
   Base(objid_, objversion_);
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   column_name_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      column_name_ IN VARCHAR2 )
   IS
   BEGIN
      SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objid_, objversion_
         FROM  mdm_source_map_tab
         WHERE template_id = template_id_
         AND   revision = revision_
         AND   column_name = column_name_;
   EXCEPTION
      WHEN no_data_found THEN
         objid_      := NULL;
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, column_name_, 'Get_Id_Version_By_Keys___');
   END Base;

BEGIN
   Base(objid_, objversion_, template_id_, revision_, column_name_);
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('TEMPLATE_ID') THEN
            newrec_.template_id := value_;
            indrec_.template_id := TRUE;
         WHEN ('REVISION') THEN
            newrec_.revision := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.revision := TRUE;
         WHEN ('COLUMN_NAME') THEN
            newrec_.column_name := value_;
            indrec_.column_name := TRUE;
         WHEN ('DESCRIPTION') THEN
            newrec_.description := value_;
            indrec_.description := TRUE;
         WHEN ('DATA_TYPE') THEN
            newrec_.data_type := value_;
            indrec_.data_type := TRUE;
         WHEN ('LENGTH') THEN
            newrec_.length := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.length := TRUE;
         WHEN ('DEFAULT_VALUE') THEN
            newrec_.default_value := value_;
            indrec_.default_value := TRUE;
         WHEN ('FLAGS') THEN
            newrec_.flags := value_;
            indrec_.flags := TRUE;
         WHEN ('NOTE_TEXT') THEN
            newrec_.note_text := value_;
            indrec_.note_text := TRUE;
         WHEN ('DB_CLIENT_VALUES') THEN
            newrec_.db_client_values := value_;
            indrec_.db_client_values := TRUE;
         WHEN ('MANDATORY') THEN
            IF (value_ IS NULL OR value_ = 'TRUE' OR value_ = 'FALSE') THEN
               newrec_.mandatory := value_;
            ELSE
               RAISE value_error;
            END IF;
            indrec_.mandatory := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (rec_.template_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('TEMPLATE_ID', rec_.template_id, attr_);
      END IF;
      IF (rec_.revision IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('REVISION', rec_.revision, attr_);
      END IF;
      IF (rec_.column_name IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('COLUMN_NAME', rec_.column_name, attr_);
      END IF;
      IF (rec_.description IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      END IF;
      IF (rec_.data_type IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DATA_TYPE', rec_.data_type, attr_);
      END IF;
      IF (rec_.length IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('LENGTH', rec_.length, attr_);
      END IF;
      IF (rec_.default_value IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DEFAULT_VALUE', rec_.default_value, attr_);
      END IF;
      IF (rec_.flags IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('FLAGS', rec_.flags, attr_);
      END IF;
      IF (rec_.note_text IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      END IF;
      IF (rec_.db_client_values IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DB_CLIENT_VALUES', rec_.db_client_values, attr_);
      END IF;
      IF (rec_.mandatory IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('MANDATORY', rec_.mandatory, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack___;


FUNCTION Pack___ (
   rec_ IN mdm_source_map_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN mdm_source_map_tab%ROWTYPE,
      indrec_ IN Indicator_Rec ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (indrec_.template_id) THEN
         Client_SYS.Add_To_Attr('TEMPLATE_ID', rec_.template_id, attr_);
      END IF;
      IF (indrec_.revision) THEN
         Client_SYS.Add_To_Attr('REVISION', rec_.revision, attr_);
      END IF;
      IF (indrec_.column_name) THEN
         Client_SYS.Add_To_Attr('COLUMN_NAME', rec_.column_name, attr_);
      END IF;
      IF (indrec_.description) THEN
         Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      END IF;
      IF (indrec_.data_type) THEN
         Client_SYS.Add_To_Attr('DATA_TYPE', rec_.data_type, attr_);
      END IF;
      IF (indrec_.length) THEN
         Client_SYS.Add_To_Attr('LENGTH', rec_.length, attr_);
      END IF;
      IF (indrec_.default_value) THEN
         Client_SYS.Add_To_Attr('DEFAULT_VALUE', rec_.default_value, attr_);
      END IF;
      IF (indrec_.flags) THEN
         Client_SYS.Add_To_Attr('FLAGS', rec_.flags, attr_);
      END IF;
      IF (indrec_.note_text) THEN
         Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      END IF;
      IF (indrec_.db_client_values) THEN
         Client_SYS.Add_To_Attr('DB_CLIENT_VALUES', rec_.db_client_values, attr_);
      END IF;
      IF (indrec_.mandatory) THEN
         Client_SYS.Add_To_Attr('MANDATORY', rec_.mandatory, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_, indrec_);
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('TEMPLATE_ID', rec_.template_id, attr_);
      Client_SYS.Add_To_Attr('REVISION', rec_.revision, attr_);
      Client_SYS.Add_To_Attr('COLUMN_NAME', rec_.column_name, attr_);
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      Client_SYS.Add_To_Attr('DATA_TYPE', rec_.data_type, attr_);
      Client_SYS.Add_To_Attr('LENGTH', rec_.length, attr_);
      Client_SYS.Add_To_Attr('DEFAULT_VALUE', rec_.default_value, attr_);
      Client_SYS.Add_To_Attr('FLAGS', rec_.flags, attr_);
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      Client_SYS.Add_To_Attr('DB_CLIENT_VALUES', rec_.db_client_values, attr_);
      Client_SYS.Add_To_Attr('MANDATORY', rec_.mandatory, attr_);
      Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack_Table___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   
   PROCEDURE Base (
      indrec_ IN OUT NOCOPY Indicator_Rec )
   IS
      empty_indrec_ Indicator_Rec;
   BEGIN
      indrec_ := empty_indrec_;
   END Base;

BEGIN
   Base(indrec_);
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      rec_ IN mdm_source_map_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.template_id := rec_.template_id IS NOT NULL;
      indrec_.revision := rec_.revision IS NOT NULL;
      indrec_.column_name := rec_.column_name IS NOT NULL;
      indrec_.description := rec_.description IS NOT NULL;
      indrec_.data_type := rec_.data_type IS NOT NULL;
      indrec_.length := rec_.length IS NOT NULL;
      indrec_.default_value := rec_.default_value IS NOT NULL;
      indrec_.flags := rec_.flags IS NOT NULL;
      indrec_.note_text := rec_.note_text IS NOT NULL;
      indrec_.db_client_values := rec_.db_client_values IS NOT NULL;
      indrec_.mandatory := rec_.mandatory IS NOT NULL;
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN mdm_source_map_tab%ROWTYPE,
   newrec_ IN mdm_source_map_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      oldrec_ IN mdm_source_map_tab%ROWTYPE,
      newrec_ IN mdm_source_map_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.template_id := Validate_SYS.Is_Changed(oldrec_.template_id, newrec_.template_id);
      indrec_.revision := Validate_SYS.Is_Changed(oldrec_.revision, newrec_.revision);
      indrec_.column_name := Validate_SYS.Is_Changed(oldrec_.column_name, newrec_.column_name);
      indrec_.description := Validate_SYS.Is_Changed(oldrec_.description, newrec_.description);
      indrec_.data_type := Validate_SYS.Is_Changed(oldrec_.data_type, newrec_.data_type);
      indrec_.length := Validate_SYS.Is_Changed(oldrec_.length, newrec_.length);
      indrec_.default_value := Validate_SYS.Is_Changed(oldrec_.default_value, newrec_.default_value);
      indrec_.flags := Validate_SYS.Is_Changed(oldrec_.flags, newrec_.flags);
      indrec_.note_text := Validate_SYS.Is_Changed(oldrec_.note_text, newrec_.note_text);
      indrec_.db_client_values := Validate_SYS.Is_Changed(oldrec_.db_client_values, newrec_.db_client_values);
      indrec_.mandatory := Validate_SYS.Is_Changed(oldrec_.mandatory, newrec_.mandatory);
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(oldrec_, newrec_);
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     mdm_source_map_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     mdm_source_map_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.template_id IS NOT NULL AND newrec_.revision IS NOT NULL)
      AND (indrec_.template_id OR indrec_.revision)
      AND (Validate_SYS.Is_Changed(oldrec_.template_id, newrec_.template_id)
        OR Validate_SYS.Is_Changed(oldrec_.revision, newrec_.revision)) THEN
         Mdm_Basic_Data_Header_API.Exist(newrec_.template_id, newrec_.revision);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'TEMPLATE_ID', newrec_.template_id);
      Error_SYS.Check_Not_Null(lu_name_, 'REVISION', newrec_.revision);
      Error_SYS.Check_Not_Null(lu_name_, 'COLUMN_NAME', newrec_.column_name);
      Error_SYS.Check_Not_Null(lu_name_, 'DATA_TYPE', newrec_.data_type);
      Error_SYS.Check_Not_Null(lu_name_, 'LENGTH', newrec_.length);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

BEGIN
   Base(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ mdm_source_map_tab%ROWTYPE;
   BEGIN
      Validate_SYS.Item_Insert(lu_name_, 'MANDATORY', indrec_.mandatory);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO mdm_source_map_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'MDM_SOURCE_MAP_RK') THEN
               Error_SYS.Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE )
   IS
      attr_    VARCHAR2(32000);
      indrec_  Indicator_Rec;
   BEGIN
      Prepare_Insert___(attr_);
      Unpack___(newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE )
   IS
      objid_         VARCHAR2(20);
      objversion_    VARCHAR2(100);
      attr_          VARCHAR2(32000);
      indrec_        Indicator_Rec;
      emptyrec_      mdm_source_map_tab%ROWTYPE;
   BEGIN
      indrec_ := Get_Indicator_Rec___(emptyrec_, newrec_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END New___;


PROCEDURE Check_Update___ (
   oldrec_ IN     mdm_source_map_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     mdm_source_map_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'TEMPLATE_ID', indrec_.template_id);
      Validate_SYS.Item_Update(lu_name_, 'REVISION', indrec_.revision);
      Validate_SYS.Item_Update(lu_name_, 'COLUMN_NAME', indrec_.column_name);
      Validate_SYS.Item_Update(lu_name_, 'FLAGS', indrec_.flags);
      Validate_SYS.Item_Update(lu_name_, 'DB_CLIENT_VALUES', indrec_.db_client_values);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     mdm_source_map_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     mdm_source_map_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE mdm_source_map_tab
            SET ROW = newrec_
            WHERE template_id = newrec_.template_id
            AND   revision = newrec_.revision
            AND   column_name = newrec_.column_name;
      ELSE
         UPDATE mdm_source_map_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'MDM_SOURCE_MAP_RK') THEN
               Error_SYS.Rowkey_Exist(Mdm_Source_Map_API.lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      newrec_         IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      objid_      VARCHAR2(20);
      objversion_ VARCHAR2(100);
      attr_       VARCHAR2(32000);
      indrec_     Indicator_rec;
      oldrec_     mdm_source_map_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(newrec_.template_id, newrec_.revision, newrec_.column_name);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(newrec_.template_id, newrec_.revision, newrec_.column_name);
      END IF;
      indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Base;

BEGIN
   Base(newrec_, lock_mode_wait_);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN mdm_source_map_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN mdm_source_map_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.template_id||'^'||remrec_.revision||'^'||remrec_.column_name||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

BEGIN
   Base(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN mdm_source_map_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN mdm_source_map_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.template_id||'^'||remrec_.revision||'^'||remrec_.column_name||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  mdm_source_map_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  mdm_source_map_tab
            WHERE template_id = remrec_.template_id
            AND   revision = remrec_.revision
            AND   column_name = remrec_.column_name;
      END IF;
   END Base;

BEGIN
   Base(objid_, remrec_);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN mdm_source_map_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN mdm_source_map_tab%ROWTYPE )
   IS
   BEGIN
      Delete___(NULL, remrec_);
   END Base;

BEGIN
   Base(remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      remrec_         IN OUT NOCOPY mdm_source_map_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      oldrec_     mdm_source_map_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(remrec_.template_id, remrec_.revision, remrec_.column_name);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(remrec_.template_id, remrec_.revision, remrec_.column_name);
      END IF;
      Check_Delete___(oldrec_);
      Delete___(NULL, oldrec_);
   END Base;

BEGIN
   Base(remrec_, lock_mode_wait_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE C_Trace_Long_Msg (
      msg_ IN VARCHAR2 )
IS
   
   PROCEDURE Cust (
         msg_ IN VARCHAR2 )
      IS
         cnt_ NUMBER;
         ptr_ NUMBER;
      BEGIN
         -- Display long statements, 250 char per line
         IF ( ltrim(msg_) IS NOT NULL ) THEN
            cnt_ := ceil(length(msg_)/250);
            ptr_ := 1;
            FOR i IN 1..cnt_ LOOP
               Trace_SYS.Message(substr(msg_,ptr_,250));
               ptr_ := ptr_ + 250;
            END LOOP;
         END IF;
      END Cust;

BEGIN
   General_SYS.Init_Method(Mdm_Source_Map_API.lu_name_, 'Mdm_Source_Map_API', 'C_Trace_Long_Msg');
   Cust(msg_);
END C_Trace_Long_Msg;


PROCEDURE C_Enum_Db_Client_Values (
      info_             IN OUT NOCOPY VARCHAR2,
      db_client_values_ IN OUT NOCOPY VARCHAR2,
      db_values_        IN OUT NOCOPY VARCHAR2,
      client_values_    IN OUT NOCOPY VARCHAR2,
      prefixed_column_  IN     VARCHAR2,
      in_lu_db_name_    IN     VARCHAR2 DEFAULT NULL,
      in_reference_     IN     VARCHAR2 DEFAULT NULL )
IS
   
   PROCEDURE Cust (
         info_             IN OUT NOCOPY VARCHAR2,
         db_client_values_ IN OUT NOCOPY VARCHAR2,
         db_values_        IN OUT NOCOPY VARCHAR2,
         client_values_    IN OUT NOCOPY VARCHAR2,
         prefixed_column_  IN     VARCHAR2,
         in_lu_db_name_    IN     VARCHAR2 DEFAULT NULL,
         in_reference_     IN     VARCHAR2 DEFAULT NULL )
      IS
         type varchar_tabtype IS
         TABLE OF VARCHAR2(2000)
         INDEX BY BINARY_INTEGER;
         type enumerate_record IS RECORD(
         client_val varchar_tabtype,
         db_val     varchar_tabtype);
         --
         enum_rec_ enumerate_record;
         --
         column_name_  VARCHAR2(200);
         view_name_    VARCHAR2(200);
         iid_lu_       VARCHAR2(2000);
         ref_          VARCHAR2(2000);
         lookup_ref_   VARCHAR2(2000);
         comments_     VARCHAR2(2000);
         db_value_     VARCHAR2(200);
         client_value_ VARCHAR2(200);
         count_        NUMBER := 0;
         stmt_client_  VARCHAR2(2000);
         stmt_db_      VARCHAR2(2000);
         client_cur_   INTEGER;
         db_cur_       INTEGER;
         dummy_        NUMBER;
         db_hdr_       VARCHAR2(20);
         client_hdr_   VARCHAR2(20);
         msg_sep_      VARCHAR2(2) := chr(13)||chr(10);
         no_iid_       EXCEPTION;
         CURSOR get_columns IS
   	   SELECT b.comments
            FROM user_col_comments B, USER_TAB_COLUMNS a
            WHERE a.TABLE_NAME = view_name_
            AND a.column_name = column_name_
            AND a.TABLE_NAME  = b.table_name
            AND a.column_name = b.column_name;         
         --
      BEGIN
         --
         view_name_ := substr(prefixed_column_, 1, instr(prefixed_column_, '.')-1);
         column_name_ := substr(prefixed_column_, instr(prefixed_column_, '.')+1);
         --
         db_hdr_ := Language_SYS.Translate_Constant( lu_name_, ' DBVAL : DB-values', Fnd_Session_API.Get_Language);
         client_hdr_ := Language_SYS.Translate_Constant( lu_name_, ' CLIENTVAL : Client-values', Fnd_Session_API.Get_Language);
         --
         trace_sys.message('View name '||view_name_);
         trace_sys.message('Column name '||column_name_);
         IF ( in_lu_db_name_ IS NULL ) THEN
            -- Lookup references for view comments
            OPEN  get_columns;
            FETCH get_columns INTO comments_;
            CLOSE get_columns;
            ref_ := Dictionary_SYS.Comment_Value_('REF', comments_);
            
            IF ref_ IS NULL THEN
               ref_ := Dictionary_SYS.Comment_Value_('ENUMERATION', comments_);
            END IF;
               
            IF ( ref_ IS NOT NULL ) THEN
               -- Remove parentheses and slashes ( f.ex. '/CASCADE')
               -- to extract LU-name only
               IF ( instr(ref_, '(') != 0 ) THEN
                  lookup_ref_ := substr(ref_, 1, instr(ref_, '(')-1);
               ELSE
                  lookup_ref_ := ref_;
               END IF;
               IF ( instr(lookup_ref_, '/') != 0 ) THEN
                  lookup_ref_ := substr(lookup_ref_, 1, instr(lookup_ref_, '/')-1);
               END IF;
               BEGIN
                  iid_lu_ := dictionary_SYS.clientnametodbname_(lookup_ref_);
               EXCEPTION
                  WHEN OTHERS THEN
                     iid_lu_ := NULL;
               END;
            END IF;
            trace_sys.message('Found reference '||lookup_ref_);
            trace_sys.message('Found LU Db name '||iid_lu_);
         ELSE
            -- Lu-name and reference are already known
            -- (Call from IntfaceMethodList)
            iid_lu_ := in_lu_db_name_;
            lookup_ref_ := in_reference_;
            trace_sys.message('Input reference '||lookup_ref_);
            trace_sys.message('Input LU Db name '||iid_lu_);
         END IF;
         -- Check if this is an LU with DB/Client
         IF ( iid_lu_ IS NOT NULL ) THEN
            iid_lu_ := iid_lu_ || '_API';
            trace_sys.message('LU Db name '||iid_lu_);
            stmt_client_  := 'BEGIN :client_value := ' || iid_lu_ || '.Get_Client_Value(:count); End;';
            stmt_db_  := 'BEGIN :db_value := ' || iid_lu_ || '.Get_Db_Value(:count); End;';
            client_cur_ := DBMS_SQL.Open_Cursor;
            db_cur_ := DBMS_SQL.Open_Cursor;
            -- Safe due to appending values are not directly exposed to user inputs
            --@ApproveDynamicStatement(2009-11-24,nabalk)
            DBMS_SQL.Parse(client_cur_, stmt_client_, DBMS_SQL.native);
            -- Safe due to appending values are not directly exposed to user inputs
            --@ApproveDynamicStatement(2009-11-24,nabalk)
            DBMS_SQL.Parse(db_cur_, stmt_db_, DBMS_SQL.native);
            LOOP
               DBMS_SQL.bind_variable(client_cur_, 'count', count_, 2000);
               DBMS_SQL.bind_variable(client_cur_, 'client_value', client_value_, 2000);
               BEGIN
                  dummy_ := DBMS_SQL.Execute(client_cur_);
               EXCEPTION
                  WHEN OTHERS THEN
                     RAISE no_iid_;
               END;
               --
               DBMS_SQL.variable_value(client_cur_, 'client_value', client_value_);
               --
               DBMS_SQL.bind_variable(db_cur_, 'count', count_, 2000);
               DBMS_SQL.bind_variable(db_cur_, 'db_value', db_value_, 2000);
               dummy_ := DBMS_SQL.Execute(db_cur_);
               DBMS_SQL.variable_value(db_cur_, 'db_value', db_value_);
               -- Keep track of maxlength
               --
               EXIT WHEN db_value_ IS NULL;
               enum_rec_.db_val(count_) := db_value_;
               enum_rec_.client_val(count_) := client_value_;
               count_ := count_ + 1;
               db_value_ := NULL;
               client_value_ := NULL;
            END LOOP;
            count_ := count_ - 1;
            db_client_values_ := lookup_ref_ || msg_sep_ || msg_sep_ ;
            db_client_values_ := db_client_values_ || db_hdr_|| ' <==> ' ||client_hdr_|| ' :' || msg_sep_|| msg_sep_;
            --
            db_values_ := lookup_ref_ || msg_sep_ || msg_sep_ || db_hdr_||' :' || msg_sep_|| msg_sep_;
            client_values_ := lookup_ref_ || msg_sep_ || msg_sep_ ||client_hdr_||' :' || msg_sep_|| msg_sep_;
            FOR i IN 0..count_ LOOP
               db_client_values_ := db_client_values_ || enum_rec_.db_val(i)|| ' <==> ' ||enum_rec_.client_val(i) || msg_sep_;
               db_values_ := db_values_ || enum_rec_.db_val(i) || msg_sep_;
               client_values_ := client_values_ || enum_rec_.client_val(i) || msg_sep_;
            END LOOP;
            info_ := Language_SYS.Translate_Constant( lu_name_, ' VALFOUND : DB/Client values found', Fnd_Session_API.Get_Language);
            DBMS_SQL.Close_Cursor(client_cur_);
            DBMS_SQL.Close_Cursor(db_cur_);
         END IF;
         trace_sys.message(info_);
      EXCEPTION
         WHEN no_iid_ THEN
            IF ( DBMS_SQL.Is_Open(client_cur_) ) THEN
               DBMS_SQL.Close_Cursor(client_cur_);
            END IF;
            IF ( DBMS_SQL.Is_Open(db_cur_) ) THEN
               DBMS_SQL.Close_Cursor(db_cur_);
            END IF;
            info_ := Language_SYS.Translate_Constant( lu_name_, ' NOVAL : No DB/Client values for :P1', Fnd_Session_API.Get_Language, iid_lu_);
            trace_sys.message(info_);
         WHEN OTHERS THEN
            IF ( DBMS_SQL.Is_Open(client_cur_) ) THEN
               DBMS_SQL.Close_Cursor(client_cur_);
            END IF;
            IF ( DBMS_SQL.Is_Open(db_cur_) ) THEN
               DBMS_SQL.Close_Cursor(db_cur_);
            END IF;
            trace_sys.message(SQLERRM);
            info_ := SQLERRM;
      
         END Cust;

BEGIN
   General_SYS.Init_Method(Mdm_Source_Map_API.lu_name_, 'Mdm_Source_Map_API', 'C_Enum_Db_Client_Values');
   Cust(info_, db_client_values_, db_values_, client_values_, prefixed_column_, in_lu_db_name_, in_reference_);
END C_Enum_Db_Client_Values;


FUNCTION C_Get_Column_Desc(
   view_name_   IN VARCHAR2,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Cust(
      view_name_   IN VARCHAR2,
      column_name_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
         description_ VARCHAR2(100);
         prompt_desc_ VARCHAR2(100);
         --
         CURSOR get_column_prompt IS
         SELECT Dictionary_SYS.Comment_Value_('PROMPT',comments)
         FROM user_col_comments
         WHERE table_name = view_name_
         AND column_name = column_name_;
      BEGIN
         description_ :=  nvl(Language_SYS.Translate_Item_Prompt_(view_name_||'.'||column_name_,column_name_,1),column_name_);
         -- Get prompt on comments if no translation available
         IF ( description_ = column_name_ ) THEN
            OPEN  get_column_prompt;
            FETCH get_column_prompt INTO prompt_desc_;
               IF ( prompt_desc_ IS NOT NULL ) THEN
                  description_ := prompt_desc_;
               END IF;
            CLOSE get_column_prompt;
         END IF;
         RETURN description_;
      EXCEPTION
         WHEN OTHERS THEN
            RETURN column_name_;
      END Cust;

BEGIN
   General_SYS.Init_Method(Mdm_Source_Map_API.lu_name_, 'Mdm_Source_Map_API', 'C_Get_Column_Desc');
   RETURN Cust(view_name_, column_name_);
END C_Get_Column_Desc;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
   
   PROCEDURE Base
   IS
   BEGIN
      NULL;
   END Base;

BEGIN
   Base;
END Init;

BEGIN
   Init;
END Mdm_Source_Map_API;
/
SHOW ERROR
