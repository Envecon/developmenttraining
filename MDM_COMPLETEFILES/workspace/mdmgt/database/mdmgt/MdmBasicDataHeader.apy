-----------------------------------------------------------------------------
--
--  Logical unit: MdmBasicDataHeader
--
--  Purpose:
--
--  IFS/Design Template Version 2.5
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

DEFINE MODULE        = MDMGT
DEFINE LU            = MdmBasicDataHeader
DEFINE TABLE         = MDM_BASIC_DATA_HEADER_TAB
DEFINE VIEW          = MDM_BASIC_DATA_HEADER
DEFINE PKG           = MDM_BASIC_DATA_HEADER_API

DEFINE OBJID         = rowid
DEFINE OBJKEY        = rowkey
DEFINE OBJVERSION    = "ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))"
DEFINE OBJSTATE      = rowstate
DEFINE OBJEVENTS     = &PKG..Finite_State_Events__(&OBJSTATE)
DEFINE STATE         = &PKG..Finite_State_Decode__(&OBJSTATE)

-----------------------------------------------------------------------------
-------------------- VIEWS FOR SELECTS --------------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &VIEW view

CREATE OR REPLACE VIEW &VIEW AS
SELECT template_id                    template_id,
       revision                       revision,
       description                    description,
       created_by                     created_by,
       created_date                   created_date,
       profile_id                     profile_id,
       notes                          notes,
       &OBJID                         objid,
       &OBJVERSION                    objversion,
       &OBJSTATE                      objstate,
       &OBJEVENTS                     objevents,
       &STATE                         state,
       &OBJKEY                        objkey
FROM   mdm_basic_data_header_tab
WITH   read only;

COMMENT ON TABLE &VIEW
   IS 'LU=&LU^PROMPT=Mdm Basic Data Header^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW..template_id
   IS 'FLAGS=K-I-L^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Template Id^';
COMMENT ON COLUMN &VIEW..revision
   IS 'FLAGS=K-I-L^DATATYPE=NUMBER^PROMPT=Revision^';
COMMENT ON COLUMN &VIEW..description
   IS 'FLAGS=AMIU-^DATATYPE=STRING(50)^PROMPT=Description^';
COMMENT ON COLUMN &VIEW..created_by
   IS 'FLAGS=AMI--^DATATYPE=STRING(10)^PROMPT=Created By^';
COMMENT ON COLUMN &VIEW..created_date
   IS 'FLAGS=AMI--^DATATYPE=DATE/DATE^PROMPT=Created Date^';
COMMENT ON COLUMN &VIEW..profile_id
   IS 'FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=Approval Template Id^REF=ApprovalProfile^';
COMMENT ON COLUMN &VIEW..notes
   IS 'FLAGS=A-IU-^DATATYPE=LONG_TEXT^PROMPT=Notes^';

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- FINITE STATE DECLARATIONS ------------------------------
-----------------------------------------------------------------------------

state_separator_   CONSTANT VARCHAR2(1)   := Client_SYS.field_separator_;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Lock_By_Id___
--    Client-support to lock a specific instance of the logical unit.
--
-- Lock_By_Keys___
--    Server support to lock a specific instance of the logical unit.
--
-- Get_Object_By_Id___
--    Get LU-record from the database with a specified object identity.
--
-- Get_Object_By_Keys___
--    Get LU-record from the database with specified key columns.
--
-- Check_Exist___
--    Check if a specific LU-instance already exist in the database.
--
-- Get_Id_Version_By_Keys___
--    Get the current OBJID and OBJVERSION for a specific LU-instance.
-----------------------------------------------------------------------------

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_changed EXCEPTION;
   row_deleted EXCEPTION;
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        &TABLE%ROWTYPE;
   dummy_      NUMBER;
   CURSOR lock_control IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_
      AND    &OBJVERSION = objversion_
      FOR UPDATE NOWAIT;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   END IF;
   CLOSE lock_control;
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RAISE row_changed;
   ELSE
      CLOSE exist_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Record_Locked(lu_name_);
   WHEN row_changed THEN
      Error_SYS.Record_Modified(lu_name_);
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN &TABLE%ROWTYPE
IS
   row_deleted EXCEPTION;
   rec_        &TABLE%ROWTYPE;
   CURSOR lock_control IS
      SELECT *
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_
      FOR UPDATE;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   ELSE
      CLOSE lock_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Keys___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   IF (getrec%NOTFOUND) THEN
      CLOSE getrec;
      Error_SYS.Record_Removed(lu_name_);
   END IF;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Id___;


FUNCTION Get_Object_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Keys___;


FUNCTION Check_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   RETURN(FALSE);
END Check_Exist___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER )
IS
   CURSOR get_version IS
      SELECT &OBJID, &OBJVERSION
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN get_version;
   FETCH get_version INTO objid_, objversion_;
   CLOSE get_version;
END Get_Id_Version_By_Keys___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION FINITE STATE MACHINE --------------------
-----------------------------------------------------------------------------
-- Finite_State_Set___
--    Updates the finite state indicator for an existing LU-instance.
--
-- Finite_State_Machine___
--    Processes an event by:
--    1. Fetching the current state
--    2. Evaluating any conditions for given event at current state
--    3. executing any exit code for the old state
--    4. Performing any action associated with given event
--    5. update the database to the new state
--    6. execute any entry code for the new state
--    7. Executing a state change to the new state
--
-- Finite_State_Add_To_Attr___
--    Adds the current state and allowed events to the attribute string.
--
-- Finite_State_Init___
--    Sets the initial finite state indicator for an existing LU-instance
--    and processes any automatic events.
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Set___ (
   rec_   IN OUT &TABLE%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
BEGIN
   rec_.rowversion := sysdate;
   UPDATE mdm_basic_data_header_tab
      SET &OBJSTATE = state_,
          rowversion = rec_.rowversion
      WHERE template_id = rec_.template_id
      AND    revision = rec_.revision;
   rec_.&OBJSTATE := state_;
END Finite_State_Set___;


PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT &TABLE%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   state_ := rec_.&OBJSTATE;
   IF (state_ IS NULL) THEN
      IF (event_ IS NULL) THEN
         Finite_State_Set___(rec_, 'New');
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Active') THEN
      IF (event_ = 'Obsolete') THEN
         Finite_State_Set___(rec_, 'Obsolete');
      ELSIF (event_ = 'Reopen') THEN
         Finite_State_Set___(rec_, 'New');
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'New') THEN
      IF (event_ = 'Action') THEN
         Finite_State_Set___(rec_, 'Active');
      ELSIF (event_ = 'Obsolete') THEN
         Finite_State_Set___(rec_, 'Obsolete');
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Obsolete') THEN
      Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
   ELSE
      Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
   END IF;
END Finite_State_Machine___;


PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   state_ := rec_.&OBJSTATE;
   Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
   Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
   Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
END Finite_State_Add_To_Attr___;


PROCEDURE Finite_State_Init___ (
   rec_  IN OUT &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Finite_State_Machine___(rec_, NULL, attr_);
   Finite_State_Add_To_Attr___(rec_, attr_);
END Finite_State_Init___;


FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('New^Active^Obsolete^');
END Get_Db_Values___;


FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('New^Active^Obsolete^');
END Get_Client_Values___;

-----------------------------------------------------------------------------
-------------------- PRIVATE FINITE STATE MACHINE ---------------------------
-----------------------------------------------------------------------------
-- Finite_State_Decode__
--   Returns the client equivalent for any database representation of
--   a state name = objstate.
--
-- Finite_State_Encode__
--   Returns the database equivalent for any client representation of
--   a state name = state.
--
-- Enumerate_States__
--   Returns a list of all possible finite states in client terminology.
--
-- Enumerate_States_Db__
--   Returns a list of all possible finite states in database terminology.
--
-- Finite_State_Events__
--   Returns a list of allowed events for a given state
--   NOTE! Regardless of conditions if not otherwize encoded
--
-- Enumerate_Events__
--   Returns a list of all possible events.
-----------------------------------------------------------------------------

FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_state_));
END Finite_State_Decode__;


FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_state_));
END Finite_State_Encode__;


PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 )
IS
BEGIN
   client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
END Enumerate_States__;


PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 )
IS
BEGIN
   db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
END Enumerate_States_Db__;


FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (db_state_ IS NULL) THEN
      RETURN NULL;
   ELSIF (db_state_ = 'Active') THEN
      RETURN 'Obsolete^Reopen^';
   ELSIF (db_state_ = 'New') THEN
      RETURN 'Action^Obsolete^';
   ELSIF (db_state_ = 'Obsolete') THEN
      RETURN NULL;
   ELSE
      RETURN NULL;
   END IF;
END Finite_State_Events__;


PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
BEGIN
   db_events_ := 'Action^Obsolete^Reopen^';
END Enumerate_Events__;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR INSERT -----------------
-----------------------------------------------------------------------------
-- Prepare_Insert___
--    Set all default values for a new instance (ON-NEW-RECORD) of this
--    logical unit by calling procedure Add_Attr.
--
-- Unpack_Check_Insert___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before creation of the new object.
--
-- Insert___
--    Insert a new LU-instance into the database and return the values
--    for OBJID and OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(attr_);
END Prepare_Insert___;


PROCEDURE Unpack_Check_Insert___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(4000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'TEMPLATE_ID') THEN
         newrec_.template_id := value_;
      ELSIF (name_ = 'REVISION') THEN
         newrec_.revision := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'DESCRIPTION') THEN
         newrec_.description := value_;
      ELSIF (name_ = 'CREATED_BY') THEN
         newrec_.created_by := value_;
      ELSIF (name_ = 'CREATED_DATE') THEN
         newrec_.created_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'PROFILE_ID') THEN
         newrec_.profile_id := value_;
         IF (value_ IS NOT NULL) THEN
            Approval_Profile_API.Exist(newrec_.profile_id);
         END IF;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'DESCRIPTION', newrec_.description);
   Error_SYS.Check_Not_Null(lu_name_, 'CREATED_BY', newrec_.created_by);
   Error_SYS.Check_Not_Null(lu_name_, 'CREATED_DATE', newrec_.created_date);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2 )
IS
BEGIN
   newrec_.rowversion := sysdate;
   newrec_.rowstate := '<UNDEFINED>';
   INSERT
      INTO mdm_basic_data_header_tab (
         template_id,
         revision,
         description,
         created_by,
         created_date,
         profile_id,
         notes,
         rowversion,
         &OBJSTATE)
      VALUES (
         newrec_.template_id,
         newrec_.revision,
         newrec_.description,
         newrec_.created_by,
         newrec_.created_date,
         newrec_.profile_id,
         empty_clob(),
         newrec_.rowversion,
         newrec_.&OBJSTATE)
      RETURNING &OBJID INTO objid_;
   newrec_.rowstate := NULL;
   Finite_State_Init___(newrec_, attr_);
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Insert___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR UPDATE -----------------
-----------------------------------------------------------------------------
-- Unpack_Check_Update___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before modifying the object.
--
-- Update___
--    Update an existing LU-instance in the database and return the
--    the new OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Unpack_Check_Update___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   objid_  IN     VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(4000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'TEMPLATE_ID') THEN
         Error_SYS.Item_Update(lu_name_, 'TEMPLATE_ID');
      ELSIF (name_ = 'REVISION') THEN
         Error_SYS.Item_Update(lu_name_, 'REVISION');
      ELSIF (name_ = 'DESCRIPTION') THEN
         newrec_.description := value_;
      ELSIF (name_ = 'CREATED_BY') THEN
         Error_SYS.Item_Update(lu_name_, 'CREATED_BY');
      ELSIF (name_ = 'CREATED_DATE') THEN
         Error_SYS.Item_Update(lu_name_, 'CREATED_DATE');
      ELSIF (name_ = 'PROFILE_ID') THEN
         newrec_.profile_id := value_;
         IF (value_ IS NOT NULL) THEN
            Approval_Profile_API.Exist(newrec_.profile_id);
         END IF;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'DESCRIPTION', newrec_.description);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     &TABLE%ROWTYPE,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
BEGIN
   newrec_.rowversion := sysdate;
   IF by_keys_ THEN
      UPDATE mdm_basic_data_header_tab
         SET template_id = newrec_.template_id,
             revision = newrec_.revision,
             description = newrec_.description,
             created_by = newrec_.created_by,
             created_date = newrec_.created_date,
             profile_id = newrec_.profile_id,
             rowversion = newrec_.rowversion
         WHERE template_id = newrec_.template_id
         AND    revision = newrec_.revision;
   ELSE
      UPDATE mdm_basic_data_header_tab
         SET template_id = newrec_.template_id,
             revision = newrec_.revision,
             description = newrec_.description,
             created_by = newrec_.created_by,
             created_date = newrec_.created_date,
             profile_id = newrec_.profile_id,
             rowversion = newrec_.rowversion
         WHERE &OBJID = objid_;
   END IF;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Update___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR DELETE -----------------
-----------------------------------------------------------------------------
-- Check_Delete___
--    Checks whether a specific LU-record may be removed or not.
--    The procedure should check business rules like attribute values
--    as well as database constraints (defined or not).
--
-- Delete___
--    Deletion of the specific LU-object from the database.
-----------------------------------------------------------------------------

PROCEDURE Check_Delete___ (
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.template_id || '^' || remrec_.revision || '^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.template_id || '^' || remrec_.revision || '^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   DELETE
      FROM  &TABLE
      WHERE &OBJID = objid_;
END Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
-- Lock__
--    Client-support to lock a specific instance of the logical unit.
--
-- New__
--    Client-support interface to create LU instances.
--       action_ = 'PREPARE'
--          Default values and handle of information to client.
--          The default values are set in procedure Prepare_Insert___.
--       action_ = 'CHECK'
--          Check all attributes before creating new object and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___.
--       action_ = 'DO'
--          Creation of new instances of the logical unit and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___
--          before calling procedure Insert___.
--
-- Modify__
--    Client-support interface to modify attributes for LU instances.
--       action_ = 'CHECK'
--          Check all attributes before modifying an existing object and
--          handle of information to client. The attribute list is unpacked,
--          checked and prepared(defaults) in procedure Unpack_Check_Update___.
--       action_ = 'DO'
--          Modification of an existing instance of the logical unit. The
--          procedure unpacks the attributes, checks all values before
--          procedure Update___ is called.
--
-- Remove__
--    Client-support interface to remove LU instances.
--       action_ = 'CHECK'
--          Check whether a specific LU-instance may be removed or not.
--          The procedure fetches the complete record by calling procedure
--          Get_Object_By_Id___. Then the check is made by calling procedure
--          Check_Delete___.
--       action_ = 'DO'
--          Remove an existing instance of the logical unit. The procedure
--          fetches the complete LU-record, checks for a delete and then
--          deletes the record by calling procedure Delete___.
-----------------------------------------------------------------------------

PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Lock__');
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack_Check_Insert___(attr_, newrec_);
   ELSIF (action_ = 'DO') THEN
      Unpack_Check_Insert___(attr_, newrec_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_ &TABLE%ROWTYPE;
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Modify__');
   IF (action_ = 'CHECK') THEN
      newrec_ := Get_Object_By_Id___(objid_);
      Unpack_Check_Update___(attr_, newrec_, objid_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack_Check_Update___(attr_, newrec_, objid_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;

-----------------------------------------------------------------------------
-------------------- PUBLIC BASE METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
-----------------------------------------------------------------------------

PROCEDURE Exist (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Exist', TRUE);
   IF (NOT Check_Exist___(template_id_, revision_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   END IF;
END Exist;

-----------------------------------------------------------------------------
-------------------- PUBLIC TRANSLATION METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE Language_Refreshed
IS
BEGIN
   Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'STATE');
END Language_Refreshed;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Action__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Action__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Action', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Action__;


PROCEDURE Obsolete__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Obsolete__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Obsolete', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Obsolete__;


PROCEDURE Reopen__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Reopen__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Reopen', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Reopen__;


PROCEDURE Write_Notes__ (
   objversion_ IN OUT VARCHAR2,
   rowid_      IN ROWID,
   lob_loc_    IN CLOB )
IS
   rec &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Write_Notes__');
   rec := Lock_By_Id___(rowid_, objversion_);
   UPDATE &TABLE
   SET notes = lob_loc_,
       rowversion = sysdate
   WHERE rowid = rowid_
   RETURNING &OBJVERSION INTO objversion_;
END Write_Notes__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Description (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ &TABLE..description%TYPE;
   CURSOR get_attr IS
      SELECT description
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Description;


FUNCTION Get_Created_By (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ &TABLE..created_by%TYPE;
   CURSOR get_attr IS
      SELECT created_by
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Created_By;


FUNCTION Get_Created_Date (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN DATE
IS
   temp_ &TABLE..created_date%TYPE;
   CURSOR get_attr IS
      SELECT created_date
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Created_Date;


FUNCTION Get_Profile_Id (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ &TABLE..profile_id%TYPE;
   CURSOR get_attr IS
      SELECT profile_id
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Profile_Id;


FUNCTION Get_Notes (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN CLOB
IS
   temp_ &TABLE..notes%TYPE;
   CURSOR get_attr IS
      SELECT notes
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Notes;


FUNCTION Get (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN Public_Rec
IS
   temp_ Public_Rec;
   CURSOR get_attr IS
      SELECT description, created_by, created_date, profile_id, notes
      FROM   &TABLE
      WHERE  template_id = template_id_
       AND   revision = revision_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   Domain_SYS.Load_State(lu_name_, Get_Client_Values___, Get_Db_Values___);
END Init;


BEGIN
   --
   -- Load the context with values
   --
   Init;
END &PKG;
/
SHOW ERROR


BEGIN
   MDM_BASIC_DATA_HEADER_API.Language_Refreshed;
END;
/

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE PKG
UNDEFINE OBJID
UNDEFINE OBJKEY
UNDEFINE OBJVERSION
UNDEFINE OBJSTATE
UNDEFINE OBJEVENTS
UNDEFINE STATE
-----------------------------------------------------------------------------
